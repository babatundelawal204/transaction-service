/*
 * This file is generated by jOOQ.
 */
package dev.babatunde.transferservice.repository.jooq;


import dev.babatunde.transferservice.repository.jooq.tables.Accounts;
import dev.babatunde.transferservice.repository.jooq.tables.TransactionEntries;
import dev.babatunde.transferservice.repository.jooq.tables.Transactions;
import dev.babatunde.transferservice.repository.jooq.tables.records.AccountsRecord;
import dev.babatunde.transferservice.repository.jooq.tables.records.TransactionEntriesRecord;
import dev.babatunde.transferservice.repository.jooq.tables.records.TransactionsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountsRecord> ACCOUNTS_ACCOUNT_NUMBER_KEY = Internal.createUniqueKey(Accounts.ACCOUNTS, DSL.name("accounts_account_number_key"), new TableField[] { Accounts.ACCOUNTS.ACCOUNT_NUMBER }, true);
    public static final UniqueKey<AccountsRecord> ACCOUNTS_PKEY = Internal.createUniqueKey(Accounts.ACCOUNTS, DSL.name("accounts_pkey"), new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final UniqueKey<TransactionEntriesRecord> TRANSACTION_ENTRIES_PKEY = Internal.createUniqueKey(TransactionEntries.TRANSACTION_ENTRIES, DSL.name("transaction_entries_pkey"), new TableField[] { TransactionEntries.TRANSACTION_ENTRIES.ID }, true);
    public static final UniqueKey<TransactionsRecord> TRANSACTIONS_PAYMENT_REFERENCE_KEY = Internal.createUniqueKey(Transactions.TRANSACTIONS, DSL.name("transactions_payment_reference_key"), new TableField[] { Transactions.TRANSACTIONS.PAYMENT_REFERENCE }, true);
    public static final UniqueKey<TransactionsRecord> TRANSACTIONS_PKEY = Internal.createUniqueKey(Transactions.TRANSACTIONS, DSL.name("transactions_pkey"), new TableField[] { Transactions.TRANSACTIONS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<TransactionEntriesRecord, AccountsRecord> TRANSACTION_ENTRIES__TRANSACTION_ENTRIES_ACCOUNT_ID_FKEY = Internal.createForeignKey(TransactionEntries.TRANSACTION_ENTRIES, DSL.name("transaction_entries_account_id_fkey"), new TableField[] { TransactionEntries.TRANSACTION_ENTRIES.ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final ForeignKey<TransactionEntriesRecord, TransactionsRecord> TRANSACTION_ENTRIES__TRANSACTION_ENTRIES_TRANSACTION_ID_FKEY = Internal.createForeignKey(TransactionEntries.TRANSACTION_ENTRIES, DSL.name("transaction_entries_transaction_id_fkey"), new TableField[] { TransactionEntries.TRANSACTION_ENTRIES.TRANSACTION_ID }, Keys.TRANSACTIONS_PKEY, new TableField[] { Transactions.TRANSACTIONS.ID }, true);
    public static final ForeignKey<TransactionsRecord, AccountsRecord> TRANSACTIONS__TRANSACTIONS_ACCOUNT_ID_FKEY = Internal.createForeignKey(Transactions.TRANSACTIONS, DSL.name("transactions_account_id_fkey"), new TableField[] { Transactions.TRANSACTIONS.ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
}
