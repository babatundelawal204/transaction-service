/*
 * This file is generated by jOOQ.
 */
package dev.babatunde.transferservice.repository.jooq.tables;


import dev.babatunde.transferservice.repository.jooq.Keys;
import dev.babatunde.transferservice.repository.jooq.Public;
import dev.babatunde.transferservice.repository.jooq.tables.Accounts.AccountsPath;
import dev.babatunde.transferservice.repository.jooq.tables.Transactions.TransactionsPath;
import dev.babatunde.transferservice.repository.jooq.tables.records.TransactionEntriesRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionEntries extends TableImpl<TransactionEntriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transaction_entries</code>
     */
    public static final TransactionEntries TRANSACTION_ENTRIES = new TransactionEntries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionEntriesRecord> getRecordType() {
        return TransactionEntriesRecord.class;
    }

    /**
     * The column <code>public.transaction_entries.id</code>.
     */
    public final TableField<TransactionEntriesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.transaction_entries.account_id</code>.
     */
    public final TableField<TransactionEntriesRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.transaction_entries.type</code>.
     */
    public final TableField<TransactionEntriesRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.transaction_entries.amount</code>.
     */
    public final TableField<TransactionEntriesRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(15, 2).nullable(false), this, "");

    /**
     * The column <code>public.transaction_entries.transaction_id</code>.
     */
    public final TableField<TransactionEntriesRecord, UUID> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.UUID.nullable(false), this, "");

    private TransactionEntries(Name alias, Table<TransactionEntriesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TransactionEntries(Name alias, Table<TransactionEntriesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.transaction_entries</code> table reference
     */
    public TransactionEntries(String alias) {
        this(DSL.name(alias), TRANSACTION_ENTRIES);
    }

    /**
     * Create an aliased <code>public.transaction_entries</code> table reference
     */
    public TransactionEntries(Name alias) {
        this(alias, TRANSACTION_ENTRIES);
    }

    /**
     * Create a <code>public.transaction_entries</code> table reference
     */
    public TransactionEntries() {
        this(DSL.name("transaction_entries"), null);
    }

    public <O extends Record> TransactionEntries(Table<O> path, ForeignKey<O, TransactionEntriesRecord> childPath, InverseForeignKey<O, TransactionEntriesRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTION_ENTRIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionEntriesPath extends TransactionEntries implements Path<TransactionEntriesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TransactionEntriesPath(Table<O> path, ForeignKey<O, TransactionEntriesRecord> childPath, InverseForeignKey<O, TransactionEntriesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionEntriesPath(Name alias, Table<TransactionEntriesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionEntriesPath as(String alias) {
            return new TransactionEntriesPath(DSL.name(alias), this);
        }

        @Override
        public TransactionEntriesPath as(Name alias) {
            return new TransactionEntriesPath(alias, this);
        }

        @Override
        public TransactionEntriesPath as(Table<?> alias) {
            return new TransactionEntriesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransactionEntriesRecord> getPrimaryKey() {
        return Keys.TRANSACTION_ENTRIES_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionEntriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_ENTRIES__TRANSACTION_ENTRIES_ACCOUNT_ID_FKEY, Keys.TRANSACTION_ENTRIES__TRANSACTION_ENTRIES_TRANSACTION_ID_FKEY);
    }

    private transient AccountsPath _accounts;

    /**
     * Get the implicit join path to the <code>public.accounts</code> table.
     */
    public AccountsPath accounts() {
        if (_accounts == null)
            _accounts = new AccountsPath(this, Keys.TRANSACTION_ENTRIES__TRANSACTION_ENTRIES_ACCOUNT_ID_FKEY, null);

        return _accounts;
    }

    private transient TransactionsPath _transactions;

    /**
     * Get the implicit join path to the <code>public.transactions</code> table.
     */
    public TransactionsPath transactions() {
        if (_transactions == null)
            _transactions = new TransactionsPath(this, Keys.TRANSACTION_ENTRIES__TRANSACTION_ENTRIES_TRANSACTION_ID_FKEY, null);

        return _transactions;
    }

    @Override
    public List<Check<TransactionEntriesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("transaction_entries_amount_check"), "((amount > (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("transaction_entries_type_check"), "(((type)::text = ANY ((ARRAY['CREDIT'::character varying, 'DEBIT'::character varying])::text[])))", true)
        );
    }

    @Override
    public TransactionEntries as(String alias) {
        return new TransactionEntries(DSL.name(alias), this);
    }

    @Override
    public TransactionEntries as(Name alias) {
        return new TransactionEntries(alias, this);
    }

    @Override
    public TransactionEntries as(Table<?> alias) {
        return new TransactionEntries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionEntries rename(String name) {
        return new TransactionEntries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionEntries rename(Name name) {
        return new TransactionEntries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionEntries rename(Table<?> name) {
        return new TransactionEntries(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionEntries where(Condition condition) {
        return new TransactionEntries(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionEntries where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionEntries where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionEntries where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionEntries where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionEntries where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionEntries where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionEntries where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionEntries whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionEntries whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
