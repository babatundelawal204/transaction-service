/*
 * This file is generated by jOOQ.
 */
package dev.babatunde.transferservice.repository.jooq.tables;


import dev.babatunde.transferservice.repository.jooq.Indexes;
import dev.babatunde.transferservice.repository.jooq.Keys;
import dev.babatunde.transferservice.repository.jooq.Public;
import dev.babatunde.transferservice.repository.jooq.tables.Accounts.AccountsPath;
import dev.babatunde.transferservice.repository.jooq.tables.TransactionEntries.TransactionEntriesPath;
import dev.babatunde.transferservice.repository.jooq.tables.records.TransactionsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>public.transactions.id</code>.
     */
    public final TableField<TransactionsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.transactions.account_id</code>.
     */
    public final TableField<TransactionsRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.transactions.currency</code>.
     */
    public final TableField<TransactionsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.transactions.description</code>.
     */
    public final TableField<TransactionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.transactions.amount</code>.
     */
    public final TableField<TransactionsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(15, 2).nullable(false), this, "");

    /**
     * The column <code>public.transactions.status</code>.
     */
    public final TableField<TransactionsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(15).defaultValue(DSL.field(DSL.raw("'PENDING'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.transactions.status_message</code>.
     */
    public final TableField<TransactionsRecord, String> STATUS_MESSAGE = createField(DSL.name("status_message"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.transactions.created_at</code>.
     */
    public final TableField<TransactionsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.transactions.updated_at</code>.
     */
    public final TableField<TransactionsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.transactions.is_commission_worthy</code>.
     */
    public final TableField<TransactionsRecord, Boolean> IS_COMMISSION_WORTHY = createField(DSL.name("is_commission_worthy"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.transactions.commission</code>.
     */
    public final TableField<TransactionsRecord, BigDecimal> COMMISSION = createField(DSL.name("commission"), SQLDataType.NUMERIC(15, 2).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.transactions.category</code>.
     */
    public final TableField<TransactionsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.transactions.channel</code>.
     */
    public final TableField<TransactionsRecord, String> CHANNEL = createField(DSL.name("channel"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.transactions.payment_reference</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_REFERENCE = createField(DSL.name("payment_reference"), SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>public.transactions.fee</code>.
     */
    public final TableField<TransactionsRecord, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.NUMERIC(15, 2).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.NUMERIC)), this, "");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>public.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> path, ForeignKey<O, TransactionsRecord> childPath, InverseForeignKey<O, TransactionsRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionsPath extends Transactions implements Path<TransactionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TransactionsPath(Table<O> path, ForeignKey<O, TransactionsRecord> childPath, InverseForeignKey<O, TransactionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionsPath(Name alias, Table<TransactionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionsPath as(String alias) {
            return new TransactionsPath(DSL.name(alias), this);
        }

        @Override
        public TransactionsPath as(Name alias) {
            return new TransactionsPath(alias, this);
        }

        @Override
        public TransactionsPath as(Table<?> alias) {
            return new TransactionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANS_ACCOUNT_ID, Indexes.IDX_TRANS_REFERENCE, Indexes.IDX_TRANS_STATUS);
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<TransactionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TRANSACTIONS_PAYMENT_REFERENCE_KEY);
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTIONS__TRANSACTIONS_ACCOUNT_ID_FKEY);
    }

    private transient AccountsPath _accounts;

    /**
     * Get the implicit join path to the <code>public.accounts</code> table.
     */
    public AccountsPath accounts() {
        if (_accounts == null)
            _accounts = new AccountsPath(this, Keys.TRANSACTIONS__TRANSACTIONS_ACCOUNT_ID_FKEY, null);

        return _accounts;
    }

    private transient TransactionEntriesPath _transactionEntries;

    /**
     * Get the implicit to-many join path to the
     * <code>public.transaction_entries</code> table
     */
    public TransactionEntriesPath transactionEntries() {
        if (_transactionEntries == null)
            _transactionEntries = new TransactionEntriesPath(this, null, Keys.TRANSACTION_ENTRIES__TRANSACTION_ENTRIES_TRANSACTION_ID_FKEY.getInverseKey());

        return _transactionEntries;
    }

    @Override
    public List<Check<TransactionsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("transactions_amount_check"), "((amount > (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("transactions_amount_check1"), "((amount >= (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("transactions_category_check"), "(((category)::text = ANY ((ARRAY['TRANSFERS'::character varying, 'BILL PAYMENTS'::character varying, 'AIRTIME'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("transactions_channel_check"), "(((channel)::text = ANY ((ARRAY['MOBILE'::character varying, 'INTERNET'::character varying, 'USSD'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("transactions_currency_check"), "(((currency)::text ~* '^[A-Z]{3}$'::text))", true),
            Internal.createCheck(this, DSL.name("transactions_status_check"), "(((status)::text = ANY ((ARRAY['PENDING'::character varying, 'SUCCESSFUL'::character varying, 'INSUFFICIENT_FUNDS'::character varying, 'FAILED'::character varying, 'INVALID_ACCOUNT_NUMBER'::character varying, 'INVALID_RECIPIENT'::character varying])::text[])))", true)
        );
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition condition) {
        return new Transactions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
