/*
 * This file is generated by jOOQ.
 */
package dev.babatunde.transferservice.repository.jooq.tables.records;


import dev.babatunde.transferservice.repository.jooq.tables.Accounts;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountsRecord extends UpdatableRecordImpl<AccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.accounts.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.accounts.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.accounts.account_number</code>.
     */
    public void setAccountNumber(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.accounts.account_number</code>.
     */
    public String getAccountNumber() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.accounts.account_name</code>.
     */
    public void setAccountName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.accounts.account_name</code>.
     */
    public String getAccountName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.accounts.account_type</code>.
     */
    public void setAccountType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.accounts.account_type</code>.
     */
    public String getAccountType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.accounts.balance</code>.
     */
    public void setBalance(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.accounts.balance</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.accounts.currency</code>.
     */
    public void setCurrency(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.accounts.currency</code>.
     */
    public String getCurrency() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.accounts.branch_code</code>.
     */
    public void setBranchCode(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.accounts.branch_code</code>.
     */
    public String getBranchCode() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.accounts.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.accounts.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for <code>public.accounts.updated_at</code>.
     */
    public void setUpdatedAt(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.accounts.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for <code>public.accounts.status</code>.
     */
    public void setStatus(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.accounts.status</code>.
     */
    public String getStatus() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountsRecord
     */
    public AccountsRecord() {
        super(Accounts.ACCOUNTS);
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(UUID id, String accountNumber, String accountName, String accountType, BigDecimal balance, String currency, String branchCode, OffsetDateTime createdAt, OffsetDateTime updatedAt, String status) {
        super(Accounts.ACCOUNTS);

        setId(id);
        setAccountNumber(accountNumber);
        setAccountName(accountName);
        setAccountType(accountType);
        setBalance(balance);
        setCurrency(currency);
        setBranchCode(branchCode);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setStatus(status);
        resetChangedOnNotNull();
    }
}
